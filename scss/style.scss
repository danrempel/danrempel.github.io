html {width: 100%; height: 100%;}
body {width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;}

$color-lines: #DDDDDD;
$color-bb8-main: #FFFFFF;
$color-bb8-orange: #FFA229;
$color-bb8-eye: #555555;

@keyframes spin {
  0% {transform: rotate(0);}
  100% {transform: rotate(-360deg);}
}

@keyframes wobble {
  $wobble-angle: 15deg;
  $wobble-leftmost: $wobble-angle * 0.1;
  $wobble-rightmost: $wobble-angle * 1.75;
  0% {transform: rotate($wobble-leftmost);}
  30% {transform: rotate($wobble-rightmost);}
  50% {transform: rotate($wobble-rightmost * 0.8);}
  70% {transform: rotate($wobble-rightmost);}
  100% {transform: rotate($wobble-leftmost);}
}

%circle {
  border-radius: 50%;
  box-sizing: border-box;
}

%outlined {
  border: 1px solid $color-lines;
  background-color: $color-bb8-main;
}

%stylable-pseudoelement {
  position: absolute;
  content: "";
}

@mixin square ($dim) {
  width: $dim;
  height: $dim;
}

@mixin circular ($diameter) {
  @extend %circle;
  @include square($diameter);
}

.bb8 {
  
  $body-diameter: 100px;
  $head-diameter: $body-diameter * 0.65;
  $big-eye-scale-factor: 4;
  $small-eye-scale-factor: 8;
  $small-eye-rim-delta: 2px;
  $port-line-thickness: 0.07 * $body-diameter;
  $solid-shadow-length-factor: 0.4;
  $dashed-shadow-length-factor: 0.2;
  
  position: relative;
  
  &-head {
    
    @extend %outlined;
    @include circular($head-diameter);
    
    position: absolute;
    
    // When not rotated, sits with center on the top point of the body
    left: ($body-diameter / 2) - ($head-diameter / 2);
    top: -$head-diameter / 2;
    
    // Wobbles around the body's center point so it "moves over the body's surface"
    transform-origin: 50% percentage(0.5 + ($head-diameter / $body-diameter));
    animation: wobble 1.25s ease infinite;
    
    .eye {
      
      @extend %circle;
      position: absolute;
      
      background-color: $color-bb8-eye;
      
      &.big {
        
        $eye-diameter: $head-diameter / $big-eye-scale-factor;
        @include square($eye-diameter);
        
        // Sits horizontally center, a little down
        left: ($head-diameter / 2) - ($eye-diameter / 2);
        top: $eye-diameter / 2;
        
      }
      
      &.little {
        
        $eye-diameter: $head-diameter / $small-eye-scale-factor;
        @include square($eye-diameter);
        
        // Sits to the right and down of the big eye
        left: ($head-diameter * 0.75) - ($eye-diameter / 2);
        top: $head-diameter / 3;
        
        // :after pseudoelement handles the lens rim
        &:after {
          
          @extend %stylable-pseudoelement;
          @include circular($eye-diameter + (2 * $small-eye-rim-delta));
          
          left: -$small-eye-rim-delta;
          top: -$small-eye-rim-delta;
          
          border: 1px solid $color-bb8-eye;
          
        }
        
      }
      
    }

  }
  
  &-body {
    
    @include circular($body-diameter);
    @extend %outlined;
    
    position: relative;
    // Clip sub-circles to border
    overflow: hidden;
    
    // Spinny round
    animation: spin 0.9s linear infinite;
    
    // 'Ports' are the orange round bits on BB-8's body
    .port {
      
      @extend %circle;
      
      position: absolute;
      border: $port-line-thickness solid $color-bb8-orange;
      
      // Puts a port of size body / scale at an angle around the circle
      @mixin port-position($scale, $angle) {
        @include square($body-diameter / $scale);
        top: -(0.5 * $body-diameter / $scale);
        left: 0.5 * $body-diameter * (1 - (1 / $scale));
        transform: rotate(#{$angle}deg);
        transform-origin: 50% percentage(($scale + 1) / 2);
      }
      
      // Position and size the ports
      &.port-1 {
        @include port-position(1.75, 330);
      }
      &.port-2 {
        @include port-position(2.5, 90);
      }
      &.port-3 {
        @include port-position(4, 230);
      }
      
    }
    
  }
  
  &:before {
    @extend %stylable-pseudoelement;
    bottom: 0;
    width: $body-diameter * $solid-shadow-length-factor;
    left: $body-diameter * 0.5;
    border-bottom: 1px solid $color-lines;
  }
  
  &:after {
    @extend %stylable-pseudoelement;
    bottom: 0;
    width: $body-diameter * $dashed-shadow-length-factor;
    left: $body-diameter * (0.5 + $solid-shadow-length-factor);
    border-bottom: 1px dashed $color-lines;
  }
  
}